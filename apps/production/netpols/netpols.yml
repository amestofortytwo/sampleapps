# Default deny for default namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-default
  namespace: default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Policies for cert-manager namespace
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy
metadata:
  name: default-deny-cert-manager
  namespace: cert-manager
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cert-manager-dns-access
  namespace: cert-manager
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to: 
        - namespaceSelector: {}
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kube-api-to-webhook
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      app: webhook
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector: {}
          namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cert-manager-to-kube-api
  namespace: cert-manager
spec:
  podSelector:
    matchExpressions:
      - { key: app, operator: In, values: [webhook, controller, cainjector, startupapicheck] }
  policyTypes:
    - Egress
  egress:
    - ports:
        - protocol: TCP
          port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cert-manager-controller-dns01-egress
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: controller
  policyTypes:
    - Egress
  egress:
    - to: 
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cert-manager-controller-dns-queries
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: controller
  policyTypes:
    - Egress
  egress:
    - ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
        - protocol: TCP
          port: 443
      to:
        - ipBlock:
            cidr: 0.0.0.0/0
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-acme-challenge
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      podtype: acme-solver
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector: 
            matchLabels:
              app.kubernetes.io/component: controller
      ports:
        - protocol: TCP
          port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-metrics-server-to-cert-manager-controller
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: controller
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: metrics-server
      ports:
        - protocol: TCP
          port: 9402
---
# Policies for argocd namespace
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy
metadata:
  name: default-deny-argocd
  namespace: argocd
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-argocd
  namespace: argocd
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
  policyTypes:
  - Ingress
  ingress:
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
---
# Policies for ingress-nginx namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-egress
  namespace: ingress-nginx
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to: 
        - ipBlock:
            cidr: 0.0.0.0/0
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-from-other-namespaces
  namespace: ingress-nginx
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector: {}
          namespaceSelector: {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress-nginx
  namespace: ingress-nginx
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Default deny for monitoring namespace
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy
metadata:
  name: default-deny-monitoring
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress